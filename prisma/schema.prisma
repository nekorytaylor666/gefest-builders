// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id             String       @id @default(uuid())
  email                String           @unique
  fullName             String?
  phoneNumber          String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  courses              Course[]
  lessons              Lesson[]
  role                 UserRole         @default(USER) // Default to USER role
  lessonProgress       LessonProgress[]
  externalSourceUserId String?             @unique
  externalMetadata     Json?            @default("{}")
}

model Course {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  thumbnailPath  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessons        Lesson[]
  slug           String           @unique @default(uuid())
  LessonProgress LessonProgress[]
}

model Lesson {
  id             Int              @id @default(autoincrement())
  courseId       Int
  title          String
  thumbnailPath  String?
  mdxContentPath String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order          Int
  course         Course           @relation(fields: [courseId], references: [id])
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessonProgress LessonProgress[]
}

model LessonProgress {
  id        Int     @id @default(autoincrement())
  userId    String
  lessonId  Int
  courseId  Int
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
}
