// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  fullName             String?
  phoneNumber          String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  courses              Course[]
  lessons              Lesson[]
  role                 UserRole         @default(USER) // Default to USER role
  lessonProgress       LessonProgress[]
  externalSourceUserId String?          @unique
  externalMetadata     Json?            @default("{}")
  submissions          Submission[]

}

model Course {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  thumbnailPath  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessons        Lesson[]
  slug           String           @unique @default(uuid())
  LessonProgress LessonProgress[]
  disabled       Boolean          @default(false)
  homeworks      Homework[]

}

model Lesson {
  id             Int              @id @default(autoincrement())
  courseId       Int
  title          String
  thumbnailPath  String?
  mdxContentPath String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order          Int
  course         Course           @relation(fields: [courseId], references: [id])
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessonProgress LessonProgress[]
}

model LessonProgress {
  id        Int     @id @default(autoincrement())
  userId    String
  lessonId  Int
  courseId  Int
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
}

model Homework {
  id          Int          @id @default(autoincrement())
  courseId    Int
  order       Int
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id         Int      @id @default(autoincrement())
  homeworkId Int
  userId     String
  fileUrl    String?
  mark       Int?
  comment    String?
  aiComment  String?
  homework   Homework @relation(fields: [homeworkId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}