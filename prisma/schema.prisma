generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  fullName             String?
  phoneNumber          String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  role                 UserRole         @default(USER)
  externalSourceUserId String?          @unique
  externalMetadata     Json?            @default("{}")
  courses              Course[]
  lessons              Lesson[]
  lessonProgress       LessonProgress[]
  reviews              Review[]
  submissions          Submission[]
  userCohorts          UserCohort[]
  activity             Activity[]
  leagueId             Int?             @default(1)
  league               League?          @relation(fields: [leagueId], references: [id])

  Comment  Comment[]
  Reply    Reply[]
  Reaction Reaction[]
}

model Cohort {
  id          Int          @id @default(autoincrement())
  name        String
  color       String?      @default("#000000")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  userCohorts UserCohort[]
}

model UserCohort {
  userId   String
  cohortId Int
  cohort   Cohort @relation(fields: [cohortId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@id([userId, cohortId])
}

model Course {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  createdAt      DateTime         @default(now())
  authorId       String
  updatedAt      DateTime         @updatedAt
  slug           String           @unique @default(uuid())
  thumbnailPath  String?
  disabled       Boolean          @default(false)
  author         User             @relation(fields: [authorId], references: [id])
  homeworks      Homework[]
  lessons        Lesson[]
  LessonProgress LessonProgress[]
}

model Lesson {
  id             Int              @id @default(autoincrement())
  courseId       Int
  title          String
  mdxContentPath String?
  order          Int
  authorId       String
  createdAt      DateTime         @default(now())
  thumbnailPath  String?
  jsonContent    Json?
  updatedAt      DateTime         @updatedAt
  author         User             @relation(fields: [authorId], references: [id])
  course         Course           @relation(fields: [courseId], references: [id])
  lessonProgress LessonProgress[]
  comments       Comment[]
}

model LessonProgress {
  id        Int     @id @default(autoincrement())
  userId    String
  lessonId  Int
  completed Boolean @default(false)
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Homework {
  id             Int          @id @default(autoincrement())
  courseId       Int
  order          Int
  createdAt      DateTime     @default(now())
  mdxContentPath String?
  jsonContent    Json?
  title          String
  updatedAt      DateTime     @updatedAt
  course         Course       @relation(fields: [courseId], references: [id])
  submissions    Submission[]
}

model Submission {
  id          Int      @id @default(autoincrement())
  homeworkId  Int
  userId      String
  mark        Int?
  comment     String?
  aiComment   String?
  fileUploads Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  hidden      Boolean  @default(false)
  review      Review?
  homework    Homework @relation(fields: [homeworkId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Review {
  id           Int        @id @default(autoincrement())
  submissionId Int        @unique
  userId       String
  type         ReviewType
  comment      String?
  mark         Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int        @id @default(autoincrement())
  content   String
  userId    String
  lessonId  Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  lesson    Lesson     @relation(fields: [lessonId], references: [id])
  replies   Reply[]
  reactions Reaction[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String
  userId    String
  commentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum ReviewType {
  TEACHER
  AI
}

model Activity {
  id               Int          @id @default(autoincrement())
  userId           String
  activityTypeName ActivityName
  createdAt        DateTime     @default(now())
  experience       Int
  type             ActivityType @relation(fields: [activityTypeName], references: [name])
  user             User         @relation(fields: [userId], references: [id])
  metadata         Json?
}

model ActivityType {
  name       ActivityName @id @unique
  label      String
  experience Int
  activities Activity[]
}

enum ActivityName {
  LESSON_COMPLETED
  HOMEWORK_SUBMITTED
}

model League {
  id              Int    @id @default(autoincrement())
  name            String
  leagueCoverPath String
  order Int @unique 
  users           User[]
}
