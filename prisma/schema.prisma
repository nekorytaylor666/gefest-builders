// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  relationMode = "prisma"
 
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  fullName             String?
  phoneNumber          String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  courses              Course[]
  lessons              Lesson[]
  role                 UserRole         @default(USER) // Default to USER role
  lessonProgress       LessonProgress[]
  externalSourceUserId String?          @unique
  externalMetadata     Json?            @default("{}")
  submissions          Submission[]
  reviews              Review[]
  thread UserAssistantThread?
  userCohorts UserCohort[]
}

model Cohort {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt @default(now()) 
  color       String?       @default("#000000")
  userCohorts UserCohort[]
}

model UserCohort {
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  cohortId Int
  cohort  Cohort  @relation(fields: [cohortId], references: [id])

  @@id([userId, cohortId])
}

model Course {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  thumbnailPath  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessons        Lesson[]
  slug           String           @unique @default(uuid())
  LessonProgress LessonProgress[]
  disabled       Boolean          @default(false)
  homeworks      Homework[]
}

model Lesson {
  id             Int              @id @default(autoincrement())
  courseId       Int
  title          String
  thumbnailPath  String?
  mdxContentPath String?
  jsonContent    Json?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  order          Int
  course         Course           @relation(fields: [courseId], references: [id])
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  lessonProgress LessonProgress[]
}

model LessonProgress {
  id        Int     @id @default(autoincrement())
  userId    String
  lessonId  Int
  courseId  Int
  completed Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  course    Course  @relation(fields: [courseId], references: [id])
}

model Homework {
  id          Int          @id @default(autoincrement())
  courseId    Int
  order       Int
  title          String
  mdxContentPath String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  course      Course       @relation(fields: [courseId], references: [id])
  submissions Submission[]
}

model Submission {
  id         Int      @id @default(autoincrement())
  homeworkId Int
  userId     String
  fileUploads   Json
  mark       Int?
  comment    String?
  hidden Boolean @default(false)
  aiComment  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt  @default(now())
  homework   Homework @relation(fields: [homeworkId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  review     Review?
}

enum ReviewType {
  TEACHER
  AI
}

model Review {
  id           Int        @id @default(autoincrement())
  submissionId Int        @unique
  userId       String
  type         ReviewType
  comment      String?
  mark         Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  submission   Submission @relation(fields: [submissionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model UserAssistantThread {
  id        String   @id
  object    String
  createdAt Int
  metadata  Json     @default("{}")
  userId String @unique
  user         User       @relation(fields: [userId], references: [id])
}